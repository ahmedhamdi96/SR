
SmartRoom2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081e  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046f  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	53 00       	.word	0x0053	; ????
  6a:	56 00       	.word	0x0056	; ????
  6c:	59 00       	.word	0x0059	; ????
  6e:	5c 00       	.word	0x005c	; ????
  70:	5f 00       	.word	0x005f	; ????
  72:	62 00       	.word	0x0062	; ????
  74:	65 00       	.word	0x0065	; ????
  76:	68 00       	.word	0x0068	; ????
  78:	6b 00       	.word	0x006b	; ????
  7a:	6e 00       	.word	0x006e	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8c:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <sevenSegDec>:
//PD5 >> C
//PD6 >> B
//PD7 >> A

void sevenSegDec(unsigned char decimal){
	switch(decimal){
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	10 f5       	brcc	.+68     	; 0xe0 <sevenSegDec+0x4c>
  9c:	fc 01       	movw	r30, r24
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__tablejump2__>
		case 0: PORTD = 0b10000001; break;
  a6:	81 e8       	ldi	r24, 0x81	; 129
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	08 95       	ret
		case 1: PORTD = 0b11100111; break;
  ac:	87 ee       	ldi	r24, 0xE7	; 231
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret
		case 2: PORTD = 0b01001001; break;
  b2:	89 e4       	ldi	r24, 0x49	; 73
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret
		case 3: PORTD = 0b01000011; break;
  b8:	83 e4       	ldi	r24, 0x43	; 67
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret
		case 4: PORTD = 0b00100111; break;
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	08 95       	ret
		case 5: PORTD = 0b00010011; break;
  c4:	83 e1       	ldi	r24, 0x13	; 19
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	08 95       	ret
		case 6: PORTD = 0b00010001; break;
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	08 95       	ret
		case 7: PORTD = 0b11000111; break;
  d0:	87 ec       	ldi	r24, 0xC7	; 199
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	08 95       	ret
		case 8: PORTD = 0b00000001; break;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	08 95       	ret
		case 9: PORTD = 0b00000011; break;
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	08 95       	ret

000000e2 <lightAndHeatSystem>:
}

void lightAndHeatSystem(){
	float temp = 0.0;

	ADCSRA |= (1<<ADSC);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
  ec:	80 81       	ld	r24, Z
  ee:	84 ff       	sbrs	r24, 4
  f0:	fd cf       	rjmp	.-6      	; 0xec <lightAndHeatSystem+0xa>
	//Min = 0, Max = 0x03FF = 1023
	if (ADC>=512 && ADC<=607){
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fa:	81 15       	cp	r24, r1
  fc:	92 40       	sbci	r25, 0x02	; 2
  fe:	48 f0       	brcs	.+18     	; 0x112 <lightAndHeatSystem+0x30>
 100:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 104:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 108:	80 36       	cpi	r24, 0x60	; 96
 10a:	92 40       	sbci	r25, 0x02	; 2
 10c:	10 f4       	brcc	.+4      	; 0x112 <lightAndHeatSystem+0x30>
		//turn on PORTC/PINS(2,3,4,5)
		PORTC = 0b00111100;
 10e:	8c e3       	ldi	r24, 0x3C	; 60
 110:	88 b9       	out	0x08, r24	; 8

	}
	if (ADC>=608 && ADC<=703){
 112:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 116:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11a:	80 36       	cpi	r24, 0x60	; 96
 11c:	92 40       	sbci	r25, 0x02	; 2
 11e:	48 f0       	brcs	.+18     	; 0x132 <lightAndHeatSystem+0x50>
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 128:	80 3c       	cpi	r24, 0xC0	; 192
 12a:	92 40       	sbci	r25, 0x02	; 2
 12c:	10 f4       	brcc	.+4      	; 0x132 <lightAndHeatSystem+0x50>
		//turn on PORTC/PINS(2,3,4)
		PORTC = 0b00011100;
 12e:	8c e1       	ldi	r24, 0x1C	; 28
 130:	88 b9       	out	0x08, r24	; 8
	}
	if (ADC>=704 && ADC<=799){
 132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13a:	80 3c       	cpi	r24, 0xC0	; 192
 13c:	92 40       	sbci	r25, 0x02	; 2
 13e:	48 f0       	brcs	.+18     	; 0x152 <lightAndHeatSystem+0x70>
 140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 144:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 148:	80 32       	cpi	r24, 0x20	; 32
 14a:	93 40       	sbci	r25, 0x03	; 3
 14c:	10 f4       	brcc	.+4      	; 0x152 <lightAndHeatSystem+0x70>
		//turn on PORTC/PINS(2,3)
		PORTC = 0b00001100;
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	88 b9       	out	0x08, r24	; 8
	}
	if (ADC>=800 && ADC<=895){
 152:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 156:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 15a:	80 32       	cpi	r24, 0x20	; 32
 15c:	93 40       	sbci	r25, 0x03	; 3
 15e:	48 f0       	brcs	.+18     	; 0x172 <lightAndHeatSystem+0x90>
 160:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 164:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 168:	80 38       	cpi	r24, 0x80	; 128
 16a:	93 40       	sbci	r25, 0x03	; 3
 16c:	10 f4       	brcc	.+4      	; 0x172 <lightAndHeatSystem+0x90>
		//turn on PORTC/PINS(2)
		PORTC = 0b00000100;
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	88 b9       	out	0x08, r24	; 8
	}
	//clear the interrupt flag
	ADCSRA |= (1<<ADIF);
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	80 83       	st	Z, r24
	//ADCSRA = 0b10000111;
	//set the MUX to the temperature sensor
	ADMUX = 0b01000001;
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//start conversion
	ADCSRA |= (1<<ADSC);
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
 188:	80 81       	ld	r24, Z
 18a:	84 ff       	sbrs	r24, 4
 18c:	fd cf       	rjmp	.-6      	; 0x188 <lightAndHeatSystem+0xa6>
		//turn on the fan
		PORTB |= (1 << 0);
		//turn on test led
		PORTB |= (1 << 3);
	}*/
	if(ADC<140){
 18e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 192:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 196:	8c 38       	cpi	r24, 0x8C	; 140
 198:	91 05       	cpc	r25, r1
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <lightAndHeatSystem+0xc0>
		//turn off the fan
		PORTB &= ~(1 << 0);
 19c:	28 98       	cbi	0x05, 0	; 5
		//turn off test led
		PORTB &= ~(1 << 3);
 19e:	2b 98       	cbi	0x05, 3	; 5
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <lightAndHeatSystem+0xc4>

		//PORTB = 0b00000110;
	} else {
		//turn on the fan
		PORTB |= (1 << 0);
 1a2:	28 9a       	sbi	0x05, 0	; 5
		//turn on test led
		PORTB |= (1 << 3);
 1a4:	2b 9a       	sbi	0x05, 3	; 5
		//_delay_ms(1000);
		//PORTB = 0b00001111;
	}
	//_delay_ms(1000);
	//clear the interrupt flag
	ADCSRA |= (1<<ADIF);
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	80 83       	st	Z, r24
	//set the MUX to the LDR
	ADMUX = 0b01000000;
 1b0:	80 e4       	ldi	r24, 0x40	; 64
 1b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1b6:	08 95       	ret

000001b8 <main>:

int main(void)
{
	unsigned char counter = 0;
	//set PORTD to 7-SEG-DEC o/p
	DDRD = 0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<1);
 1bc:	21 98       	cbi	0x04, 1	; 4
	DDRB &= ~(1<<2);
 1be:	22 98       	cbi	0x04, 2	; 4
	PORTB |= (1<<1);
 1c0:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<2);
 1c2:	2a 9a       	sbi	0x05, 2	; 5
	unsigned char in = 0;
	unsigned char out = 0;

	//set PORTC/PINS(2,3,4,5) to be output
	DDRC |= 0b00111100;
 1c4:	87 b1       	in	r24, 0x07	; 7
 1c6:	8c 63       	ori	r24, 0x3C	; 60
 1c8:	87 b9       	out	0x07, r24	; 7
	//set PORTC/PIN(0) to be input -LDR-
	DDRC &= ~(1 << 0);
 1ca:	38 98       	cbi	0x07, 0	; 7

	//set PORTC/PIN(1) to be input -temperature sensor-
	DDRC &= ~(1 << 1);
 1cc:	39 98       	cbi	0x07, 1	; 7
	//pull-up resistor
	PORTC |= (1 << 1);
 1ce:	41 9a       	sbi	0x08, 1	; 8
	//set PORTB/PIN(0) to be the output -fan-
	DDRB |= (1 << 0);
 1d0:	20 9a       	sbi	0x04, 0	; 4

	//set PORTB/PIN(3) to be the led test output -led TEST-
	DDRB |= (1 << 3);
 1d2:	23 9a       	sbi	0x04, 3	; 4

	//REFS1 REFS0 ADLAR - MUX3 MUX2 MUX1 MUX0
	ADMUX = 0b01000000;
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	ADCSRA = 0b10000111;
 1da:	87 e8       	ldi	r24, 0x87	; 135
 1dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DDRB &= ~(1<<1);
	DDRB &= ~(1<<2);
	PORTB |= (1<<1);
	PORTB |= (1<<2);
	unsigned char in = 0;
	unsigned char out = 0;
 1e0:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0xFF;
	DDRB &= ~(1<<1);
	DDRB &= ~(1<<2);
	PORTB |= (1<<1);
	PORTB |= (1<<2);
	unsigned char in = 0;
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
	ADMUX = 0b01000000;
}

int main(void)
{
	unsigned char counter = 0;
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
			in = 1;
			_delay_ms(500);
		}
		while(in && ((PINB&(1<<1)) == 0));
		if(in && (counter<9)){
			in = 0;
 1e6:	f1 2c       	mov	r15, r1
			//turn off test led
			PORTB &= ~(1 << 3);
		}

		if((PINB&(1<<1)) == 0){
			in = 1;
 1e8:	01 e0       	ldi	r16, 0x01	; 1
	//ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0
	ADCSRA = 0b10000111;

	while (1)
	{
		if(counter>0){
 1ea:	cc 23       	and	r28, r28
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <main+0x3c>
			lightAndHeatSystem();
 1ee:	0e 94 71 00 	call	0xe2	; 0xe2 <lightAndHeatSystem>
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <main+0x46>
			} else {
			//turn off the LEDs
			PORTC &= ~(0b00111100);
 1f4:	88 b1       	in	r24, 0x08	; 8
 1f6:	83 7c       	andi	r24, 0xC3	; 195
 1f8:	88 b9       	out	0x08, r24	; 8
			//turn off the fan
			PORTB &= ~(1 << 0);
 1fa:	28 98       	cbi	0x05, 0	; 5
			//turn off test led
			PORTB &= ~(1 << 3);
 1fc:	2b 98       	cbi	0x05, 3	; 5
		}

		if((PINB&(1<<1)) == 0){
 1fe:	19 99       	sbic	0x03, 1	; 3
 200:	0b c0       	rjmp	.+22     	; 0x218 <main+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	2f e9       	ldi	r18, 0x9F	; 159
 204:	86 e8       	ldi	r24, 0x86	; 134
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x50>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x5a>
 212:	00 00       	nop
			in = 1;
 214:	d0 2f       	mov	r29, r16
 216:	02 c0       	rjmp	.+4      	; 0x21c <main+0x64>
			_delay_ms(500);
		}
		while(in && ((PINB&(1<<1)) == 0));
 218:	dd 23       	and	r29, r29
 21a:	39 f0       	breq	.+14     	; 0x22a <main+0x72>
 21c:	19 99       	sbic	0x03, 1	; 3
 21e:	28 c0       	rjmp	.+80     	; 0x270 <main+0xb8>
 220:	19 9b       	sbis	0x03, 1	; 3
 222:	fe cf       	rjmp	.-4      	; 0x220 <main+0x68>
 224:	25 c0       	rjmp	.+74     	; 0x270 <main+0xb8>
		if(in && (counter<9)){
			in = 0;
			counter++;
 226:	cf 5f       	subi	r28, 0xFF	; 255
			in = 1;
			_delay_ms(500);
		}
		while(in && ((PINB&(1<<1)) == 0));
		if(in && (counter<9)){
			in = 0;
 228:	df 2d       	mov	r29, r15
			counter++;
		}

		if((PINB&(1<<2)) == 0){
 22a:	1a 99       	sbic	0x03, 2	; 3
 22c:	0b c0       	rjmp	.+22     	; 0x244 <main+0x8c>
 22e:	2f e9       	ldi	r18, 0x9F	; 159
 230:	86 e8       	ldi	r24, 0x86	; 134
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x7c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x86>
 23e:	00 00       	nop
			out = 1;
 240:	10 2f       	mov	r17, r16
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x90>
			_delay_ms(500);
		}
		while(out && ((PINB&(1<<2)) == 0));
 244:	11 23       	and	r17, r17
 246:	39 f0       	breq	.+14     	; 0x256 <main+0x9e>
 248:	1a 99       	sbic	0x03, 2	; 3
 24a:	15 c0       	rjmp	.+42     	; 0x276 <main+0xbe>
 24c:	1a 9b       	sbis	0x03, 2	; 3
 24e:	fe cf       	rjmp	.-4      	; 0x24c <main+0x94>
 250:	12 c0       	rjmp	.+36     	; 0x276 <main+0xbe>
		if(out && (counter>0)){
			out = 0;
			counter--;
 252:	c1 50       	subi	r28, 0x01	; 1
			out = 1;
			_delay_ms(500);
		}
		while(out && ((PINB&(1<<2)) == 0));
		if(out && (counter>0)){
			out = 0;
 254:	1f 2d       	mov	r17, r15
			counter--;
		}

		sevenSegDec(counter);
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 4a 00 	call	0x94	; 0x94 <sevenSegDec>
 25c:	2f e9       	ldi	r18, 0x9F	; 159
 25e:	86 e8       	ldi	r24, 0x86	; 134
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0xaa>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0xb4>
 26c:	00 00       	nop
 26e:	bd cf       	rjmp	.-134    	; 0x1ea <main+0x32>
		if((PINB&(1<<1)) == 0){
			in = 1;
			_delay_ms(500);
		}
		while(in && ((PINB&(1<<1)) == 0));
		if(in && (counter<9)){
 270:	c9 30       	cpi	r28, 0x09	; 9
 272:	c8 f2       	brcs	.-78     	; 0x226 <main+0x6e>
 274:	da cf       	rjmp	.-76     	; 0x22a <main+0x72>
		if((PINB&(1<<2)) == 0){
			out = 1;
			_delay_ms(500);
		}
		while(out && ((PINB&(1<<2)) == 0));
		if(out && (counter>0)){
 276:	c1 11       	cpse	r28, r1
 278:	ec cf       	rjmp	.-40     	; 0x252 <main+0x9a>
 27a:	ed cf       	rjmp	.-38     	; 0x256 <main+0x9e>

0000027c <__tablejump2__>:
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	05 90       	lpm	r0, Z+
 282:	f4 91       	lpm	r31, Z
 284:	e0 2d       	mov	r30, r0
 286:	09 94       	ijmp

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
